name: CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'


jobs:
  backend-build:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build backend
        working-directory: backend
        run: npm run build

  frontend-build:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  deploy:
    name: Deploy to GCP VM
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build & push frontend image
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./frontend
      #     file: ./frontend/Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/notes-frontend:latest

      # - name: Build & push backend image
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./backend
      #     file: ./backend/Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/notes-backend:latest

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh

          # Убираем символы возврата каретки, чтобы получилось чистое LF
          echo "${{ vars.VM_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa

          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts


      - name: Inspect cleaned id_rsa
        run: |
          echo "→ file type:"; file ~/.ssh/id_rsa
          echo "→ fingerprint:"; ssh-keygen -lf ~/.ssh/id_rsa
          echo "→ hexdump:"; hexdump -C -n 64 ~/.ssh/id_rsa

      - name: Test SSH access
        run: |
          ssh -vvv -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} echo "SSH OK"


      - name: Copy prod docker-compose to VM
        run: |
          rsync -avz \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -v" \
            docker-compose.prod.yml \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/${{ secrets.VM_USER }}/docker-compose.yml



      - name: Deploy on VM
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd /home/${{ secrets.VM_USER }}
            docker compose down || true
            docker compose pull
            docker compose up -d
          EOF

